# -*- mode: makefile -*-
#
# Mongoose IoT for ESP8266
#
# GC_DEBUG: if "true" (default) enables string ASN checks
# STACK_GUARD: if "true" (default) enables soft stack guard
# SSL: if set to "Krypton" enables SSL with the krypton lib
# V7_FREEZE: if "1" (default) freezes the stdlib object graph into a static graph
#         loadable in ROM
# HEAP_LOG: if "1", compiles ESP firmware with heap logging feature: there are
#           logging wrappers for malloc and friends. You can later view heap
#           map by `tools/heaplog_viewer/heaplog_viewer.html`
#
MAKEFLAGS += --warn-undefined-variables
.DEFAULT_GOAL := all

APP ?= mongoose-iot
APP_PLATFORM = esp8266
APP_MODULES ?=
APP_CFLAGS ?=
APP_FS_PATH ?=
APP_EXTRA_SRCS ?=

SJ_ENABLE_JS ?= 1
SJ_ENABLE_CLUBBY ?= 1

REPO_PATH ?= ../../..
COMMON_PATH ?= $(REPO_PATH)/common
MIOT_PATH ?= $(REPO_PATH)/fw
KRYPTON_PATH ?= $(REPO_PATH)/krypton
MONGOOSE_PATH ?= $(REPO_PATH)/mongoose
FROZEN_PATH ?= $(REPO_PATH)/frozen
V7_PATH ?= $(REPO_PATH)/v7

COMMON_ESP_PATH ?= $(COMMON_PATH)/platforms/esp8266
MIOT_ESP_PATH ?= $(MIOT_PATH)/platforms/esp8266
MIOT_POSIX_PATH ?= $(MIOT_PATH)/platforms/posix
MIOT_SRC_PATH ?= $(MIOT_PATH)/src
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
UMM_MALLOC_PATH ?= $(COMMON_PATH)/umm_malloc
MIOT_JS_PATH ?= $(MIOT_SRC_PATH)/js
COMMON_FS_PATH ?= $(MIOT_SRC_PATH)/fs
LWIP_PATH ?= $(COMMON_ESP_PATH)/lwip
BOOTLOADER_PATH ?= $(COMMON_ESP_PATH)/rboot
ESPTOOL2 = $(BUILD_DIR)/esptool2
V7_FREEZE ?= 1
HEAP_LOG ?=

CREATE_SPIFFS_FS ?= 1
CREATE_RAW_FS ?= 0

FLASH_SIZE ?= 1M
FS_SIZE ?= 128K
FS_BLOCK_SIZE = 4096
FS_PAGE_SIZE = 256
FS_ERASE_SIZE = 4096

RF_CAL_DATA_SIZE = 0x1000
SYS_PARAM_SIZE = 0x4000

FW_FILE_1_ADDR = 0
FW_FILE_2_ADDR = 0x11000
FW2_FILE_2_ADDR=$(shell printf "0x%08x" $$(($(FW_FILE_2_ADDR) + 0x100000)))

BUILD_DIR ?= $(CURDIR)/.build
LWIP_BUILD_DIR = $(BUILD_DIR)/lwip
MIOT_POSIX_BIN_DIR = $(BUILD_DIR)/posix_sjs_bin
MIOT_POSIX_BUILD_DIR = $(BUILD_DIR)/posix_sjs_build
MIOT_POSIX_BIN = $(MIOT_POSIX_BIN_DIR)/mongoose-iot
FW_STAGING_DIR = $(BUILD_DIR)/fw_temp
FW_DIR = $(CURDIR)/firmware

FS_STAGING_DIR = $(BUILD_DIR)/fs_temp
RBOOT_FW_NAME = 0x00000.bin
FW_SECTS = .text .data .rodata
FW_USER_ARGS  = -quiet -bin -boot2

# SSL can be None or Krypton
SSL ?= Krypton

include $(COMMON_ESP_PATH)/common.mk

# For FW_VERSION, COMMON_V7_FEATURES, MG_FEATURES_TINY
include $(REPO_PATH)/fw/common.mk

MIOT_ESP_SRC_PATH = $(MIOT_ESP_PATH)/user

MIOT_SRCS = cs_rbuf.c \
            clubby_proto.c \
            sj_clubby.c \
            sj_config.c \
            sj_console.c cs_frbuf.c \
            sj_init.c \
            sj_i2c_js.c \
            sj_spi_js.c \
            sj_timers_mongoose.c \
            sj_wifi.c \
            sj_mongoose.c \
            sj_sys_config.c $(notdir $(SYS_CONFIG_C)) $(notdir $(SYS_RO_VARS_C)) \
            sj_utils.c \
            cs_crc32.c sj_updater_common.c sj_updater_clubby.c sj_updater_post.c \
            rboot-bigflash.c rboot-api.c \
            json_utils.c \
            umm_malloc.c \
            mongoose.c frozen.c
MIOT_SRCS += $(notdir $(foreach m,$(MIOT_ESP_SRC_PATH) $(SPIFFS_PATH) $(COMMON_ESP_PATH),$(wildcard $(m)/*.c)))
APP_SRCS := $(notdir $(foreach m,$(APP_MODULES),$(wildcard $(m)/*.c))) $(APP_EXTRA_SRCS)

ifeq "$(SJ_ENABLE_JS)" "1"
MIOT_SRCS += v7.c \
             sj_adc_js.c \
             sj_clubby_js.c \
             sj_config_js.c \
             sj_console_js.c \
             sj_debug_js.c \
             sj_gpio_js.c \
             sj_http_js.c \
             sj_init_js.c \
             sj_mqtt_js.c \
             sj_prompt.c \
             sj_pwm_js.c \
             sj_sys_config_js.c \
             sj_tcp_udp_js.c \
             sj_timers_js.c \
             sj_v7_ext.c \
             sj_wifi_js.c \
             sj_ws_client_js.c
endif

JSBIN_EXTRA ?=
JSBIN_SRCS := $(MIOT_JS_PATH)/sys_init.js \
              $(MIOT_JS_PATH)/demo.js \
              $(MIOT_JS_PATH)/I2C.js \
              $(JSBIN_EXTRA)

ifneq "$(APP_FS_PATH)" ""
JSBIN_SRCS += $(wildcard $(APP_FS_PATH)/*.js)
endif

JS_SRCS    :=

# In order to keep compatibility
# with shared JS-files, which can call "File.eval(....)"
# using JS as extension
JSBIN_EXT := js
JS_EXT := js
VPATH = $(APP_MODULES) $(MIOT_SRC_PATH) $(MONGOOSE_PATH) \
        $(FROZEN_PATH) $(UMM_MALLOC_PATH) \
        $(BOOTLOADER_PATH)/rboot/appcode $(COMMON_PATH) \
        $(MIOT_ESP_SRC_PATH) $(SPIFFS_PATH) $(COMMON_ESP_PATH)
IPATH = $(APP_MODULES) $(REPO_PATH) $(MIOT_ESP_PATH)/include $(SPIFFS_PATH) \
        $(BOOTLOADER_PATH)/rboot $(LWIP_PATH)/src/include \
        $(LWIP_PATH)/src/include/ipv4 $(LWIP_PATH)/espressif/include \
        $(SDK_PATH)/include $(SDK_PATH)/include/json $(COMMON_ESP_PATH) \
        $(MIOT_ESP_SRC_PATH) .
LPATH = $(SDK_PATH)/lib $(BUILD_DIR)/lwip $(MIOT_ESP_SRC_PATH)

# libraries used in this project, mainly provided by the SDK
SDK_LIBS = c crypto gcc hal m pp phy net80211 wpa main_ota
LIBS = $(addprefix -l,$(SDK_LIBS))

SHIMS = -DNDEBUG

V7_FEATURES ?= $(COMMON_V7_FEATURES) \
               -DV7_BUILD_PROFILE=1 -DV7_ENABLE_FILE \
               -DV7_DISABLE_AST_TAG_NAMES \
               -DV7_ENABLE__RegExp=1 \
               -DV7_ENABLE__StackTrace=1 \
               -DV7_ENABLE__Object__getPrototypeOf \
               -DV7_ENABLE__Object__isPrototypeOf \
               -DV7_ENABLE__Object__hasOwnProperty \
               -DV7_ENABLE__Object__keys \
               -DV7_ENABLE__Object__isExtensible \
               -DV7_EXPOSE_PRIVATE -DV7_ENABLE_ENTITY_IDS
V7_GC_DEBUG ?= 1
V7_STACK_GUARD ?= 1

MIOT_FEATURES ?= -DSJ_ENABLE_ADC_API \
                -DSJ_ENABLE_DEBUG_API \
                -DSJ_ENABLE_GPIO_API \
                -DSJ_ENABLE_HTTP_CLIENT_API \
                -DSJ_ENABLE_HTTP_SERVER_API \
                -DSJ_ENABLE_I2C_API \
                -DSJ_ENABLE_MQTT_API \
                -DSJ_ENABLE_PWM_API \
                -DSJ_ENABLE_SPI_API \
                -DSJ_ENABLE_TCP_API \
                -DSJ_ENABLE_UDP_API \
                -DSJ_ENABLE_WIFI_API \
                -DSJ_ENABLE_WS_CLIENT_API
MIOT_ESP_FEATURES = -DSJ_ENABLE_WEB_CONFIG \
                     -DSJ_ENABLE_FILE_UPLOAD \
                     -DSJ_ENABLE_UPDATER_CLUBBY \
                     -DSJ_ENABLE_UPDATER_CLUBBY_API \
                     -DSJ_ENABLE_UPDATER_POST \
                     -DSJ_ENABLE_CONSOLE_FILE_BUFFER

MINIZ_FLAGS = -DMINIZ_NO_STDIO -DMINIZ_NO_TIME -DMINIZ_NO_ARCHIVE_APIS \
              -DMINIZ_NO_ARCHIVE_APIS -DMINIZ_NO_ZLIB_APIS \
              -DMINIZ_NO_ZLIB_COMPATIBLE_NAMES

MG_FEATURES ?= $(MG_FEATURES_TINY) -DMG_ESP8266 -DMG_LWIP -DMG_EXT_SHA1

FEATURES_EXTRA ?=
FEATURES = $(MG_FEATURES) $(MIOT_FEATURES) $(MIOT_ESP_FEATURES) \
           $(FEATURES_EXTRA) \
           -DESP_COREDUMP -DESP_FLASH_BYTES_EMUL -DCS_ENABLE_SPIFFS \
           -DMG_NO_BSD_SOCKETS -DDISABLE_MD5 -DBOOT_BIG_FLASH \
           -DSPIFFS_ON_PAGE_MOVE_HOOK=esp_spiffs_on_page_move_hook \
           -DCS_MMAP -DV7_MMAP_EXEC -DESP_UMM_ENABLE

MEMORY_FLAGS = -DMBUF_SIZE_MULTIPLIER=1 -DFS_MAX_OPEN_FILES=5 \
               -DV7_STACK_SIZE=8192-64

.PHONY: all clean

MIOT_CFLAGS = -DLWIP_OPEN_SRC -DMG_LOCALS -DMG_DISABLE_SOCKET_IF \
               -DESP_ENABLE_MG_LWIP_IF

ifeq "${CREATE_SPIFFS_FS}" "1"
  FW_FS_OUT = $(FW_STAGING_DIR)/$(FS_ADDR).bin
endif

LD_SCRIPT_TEMPL = $(MIOT_ESP_PATH)/ld/fw.ld

_FLASH_SIZE = $(shell echo $$((`echo $(FLASH_SIZE) | \
   sed -e 's/K/*1024/;s/k/128/;s/M/*1048576/;s/m/*131072/'`)))
_FS_SIZE = $(shell echo $$((`echo $(FS_SIZE) | \
   sed -e 's/K/*1024/;s/k/128/;s/M/*1048576/;s/m/*131072/'`)))

LWIP_LIB = $(LWIP_BUILD_DIR)/liblwip_cs.a
MIOT_LIB = $(BUILD_DIR)/mongoose-iot.a
SYS_CONFIG_C = $(BUILD_DIR)/sys_config.c
SYS_RO_VARS_C = $(BUILD_DIR)/sys_ro_vars.c
BUILD_INFO_C = $(BUILD_DIR)/build_info.c
BUILD_INFO_O = $(BUILD_DIR)/build_info.o
BUILD_INFO_JSON = $(BUILD_DIR)/build_info.json
GENFILES_FLAG = $(BUILD_DIR)/genfiles.done
GENFILES_LIST = $(LD_SCRIPT) $(SYS_CONFIG_C) $(SYS_RO_VARS_C)
FW_FILE_1_OUT = $(FW_STAGING_DIR)/$(shell printf "0x%05x.bin" $(FW_FILE_1_ADDR))
FW_FILE_2_OUT = $(FW_STAGING_DIR)/$(shell printf "0x%05x.bin" $(FW_FILE_2_ADDR))
IMAGE_HEADER_SIZE = 0

ifeq "$(SSL)" "Krypton"
  IPATH += $(KRYPTON_PATH)
  VPATH += $(KRYPTON_PATH)
  MIOT_SRCS += krypton.c esp_crypto.c esp_ssl_krypton.c
  FEATURES += -DMG_ENABLE_SSL -DMG_DISABLE_PFS -DSSL_KRYPTON \
              -DKR_LOCALS -DKR_EXT_IO -DKR_EXT_RANDOM -DKR_EXT_MD5 -DKR_EXT_SHA1 \
              -DKR_EXT_AES -DKR_NO_LOAD_CA_STORE
endif

ifeq "$(SJ_ENABLE_JS)" "1"
  GENFILES_LIST += $(V7_PATH)/v7.c $(V7_PATH)/v7.h
  MIOT_FEATURES += -DSJ_ENABLE_JS
  VPATH += $(V7_PATH)
  $(BUILD_DIR)/v7.o $(BUILD_DIR)/fr.o: CFLAGS += $(V7_FEATURES)
  $(BUILD_DIR)/mongoose.o: CFLAGS += -DEXCLUDE_COMMON
  ifeq "$(V7_FREEZE)" "1"
    MIOT_ESP_FEATURES += -DV7_THAW
    GENFILES_LIST += $(BUILD_DIR)/fr.c
    MIOT_SRCS += fr.c
  endif
  ifneq "$(V7_GC_DEBUG)" "1"
    MEMORY_FLAGS += -DV7_DISABLE_STR_ALLOC_SEQ
  endif
  ifeq "$(V7_STACK_GUARD)" "1"
    MEMORY_FLAGS += -DV7_STACK_GUARD_MIN_SIZE=256 -finstrument-functions
  endif
else
  MIOT_SRCS += cs_file.c str_util.c
endif

ifeq "$(SJ_ENABLE_CLUBBY)" "1"
  MIOT_FEATURES += -DSJ_ENABLE_CLUBBY -DSJ_ENABLE_CLUBBY_API
endif

MIOT_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(MIOT_SRCS)))
APP_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(APP_SRCS)))

FS_FILES = $(filter-out $(JSBIN_SRCS),$(wildcard $(COMMON_FS_PATH)/*))
ifneq "$(APP_FS_PATH)" ""
  FS_FILES += $(filter-out $(JSBIN_SRCS),$(wildcard $(APP_FS_PATH)/*))
endif

APP_OUT = $(BUILD_DIR)/$(APP).out
LD_SCRIPT = $(BUILD_DIR)/$(FW_FILE_2_ADDR).ld
LD_WRAPPERS =
HEAP_LOG_FLAGS =

ifeq "${HEAP_LOG}" "1"
  HEAP_LOG_FLAGS += -DESP_ENABLE_HEAP_LOG
  LD_WRAPPERS += -Wl,--wrap=pvPortCalloc \
                 -Wl,--wrap=pvPortMalloc \
                 -Wl,--wrap=pvPortZalloc \
                 -Wl,--wrap=pvPortRealloc \
                 -Wl,--wrap=vPortFree
endif

IMAGE_HEADER_SIZE = 0x10
ROM_SIZE = $(shell printf "0x%05x" "$$((0x100000 - $(FW_FILE_2_ADDR) - $(_FS_SIZE) - $(RF_CAL_DATA_SIZE) - $(SYS_PARAM_SIZE) - $(IMAGE_HEADER_SIZE)))")
FW_RF_CAL_DATA_ADDR = $(shell printf "0x%05x" "$$((0x100000 - $(RF_CAL_DATA_SIZE) - $(SYS_PARAM_SIZE)))")
FS_ADDR  = $(shell printf "0x%05x" "$$((0x100000 - $(_FS_SIZE) - $(RF_CAL_DATA_SIZE) - $(SYS_PARAM_SIZE)))")
FS2_ADDR = $(shell printf "0x%05x" "$$((0x200000 - $(_FS_SIZE) - $(RF_CAL_DATA_SIZE) - $(SYS_PARAM_SIZE)))")
RBOOT_CFG_INIT=$(FW_STAGING_DIR)/0x01000.bin
RF_CAL_DATA_INIT=$(FW_STAGING_DIR)/$(FW_RF_CAL_DATA_ADDR).bin
PREREQ = rboot $(RBOOT_CFG_INIT)
BOOTLOADER_FLAGS = -DFW1_ADDR=$(FW_FILE_2_ADDR) \
                   -DFW2_ADDR=$(FW2_FILE_2_ADDR) \
                   -DFW1_FS_ADDR=$(FS_ADDR) \
                   -DFW2_FS_ADDR=$(FS2_ADDR) \
                   -DFS_SIZE=$(_FS_SIZE) \
                   -DFW_SIZE=$(ROM_SIZE)

FW_MANIFEST = $(FW_STAGING_DIR)/manifest.json

INCDIRS = $(addprefix -I,$(IPATH)) -I$(BUILD_DIR)
LIBDIRS = $(addprefix -L,$(LPATH))

ESP_TOOL_CMD = $(ESPTOOL) elf2image -o $(FW_STAGING_DIR)/ $(APP_OUT)

CFLAGS += $(MEMORY_FLAGS) $(SHIMS) $(FEATURES) \
          -DFW_RF_CAL_DATA_ADDR=$(FW_RF_CAL_DATA_ADDR) \
          -DFW_ARCHITECTURE=\"$(APP_PLATFORM)\" \
          $(MIOT_CFLAGS) $(APP_CFLAGS) $(CFLAGS_EXTRA) \
          $(HEAP_LOG_FLAGS) $(MINIZ_FLAGS) $(BOOTLOADER_FLAGS)

LDFLAGS += -u Cache_Read_Enable_New

$(BUILD_DIR) $(FW_DIR) $(FW_STAGING_DIR):
	$(vecho) "MKDIR $@"
	$(Q) mkdir -p $@

# Main output product: firmware files.
FW_PARTS = boot:src=$(FW_FILE_1_OUT),addr=0 \
           boot_cfg:src=$(RBOOT_CFG_INIT),addr=0x1000 \
           rf_cal_data:src=$(RF_CAL_DATA_INIT),addr=$(FW_RF_CAL_DATA_ADDR) \
           fw:src=$(FW_FILE_2_OUT),addr=$(FW_FILE_2_ADDR)

ifeq "$(CREATE_SPIFFS_FS)" "1"
  FW_PARTS += fs:src=$(FW_FS_OUT),type=fs,addr=$(FS_ADDR),fs_size=$(_FS_SIZE),fs_block_size=$(FS_BLOCK_SIZE),fs_page_size=$(FS_PAGE_SIZE),fs_erase_size=$(FS_ERASE_SIZE)
endif

ifeq "$(CREATE_RAW_FS)" "1"
  FW_PARTS += fs_dir:src=$(FS_STAGING_DIR),type=fs_dir,addr=$(FS_ADDR),fs_size=$(_FS_SIZE),fs_block_size=$(FS_BLOCK_SIZE),fs_page_size=$(FS_PAGE_SIZE),fs_erase_size=$(FS_ERASE_SIZE)
endif

include $(REPO_PATH)/common/scripts/fw_meta.mk

all: $(FW_DIR) $(BUILD_DIR) $(FW_STAGING_DIR) $(PREREQ) $(FW_ZIP)

$(FW_MANIFEST): $(FW_FILE_1_OUT) $(RBOOT_CFG_INIT) $(RF_CAL_DATA_INIT) \
                $(FW_FILE_2_OUT) $(FW_FS_OUT) $(FS_FILES) $(JSBIN_SRCS)

$(RBOOT_CFG_INIT) $(RF_CAL_DATA_INIT): $(FW_STAGING_DIR)
	$(vecho) "GEN   $@"
	$(Q) dd if=/dev/zero ibs=1 count=4096 | tr "\000" "\377" > $@

$(FW_FILE_1_OUT): $(BUILD_DIR)/rboot.bin
	$(vecho) "CP    $< -> $@"
	$(Q) cp $< $@

$(FW_FILE_2_OUT): $(APP_OUT)
	$(vecho) "FW    $(APP_OUT) -> $@"
	$(Q) $(ESPTOOL2) $(FW_USER_ARGS) $(APP_OUT) $@ $(FW_SECTS)

# -- Linking.

# Link the main ELF output file.
$(APP_OUT): $(APP_OBJS) $(BUILD_INFO_O) $(MIOT_LIB) $(LWIP_LIB) $(BUILD_DIR)/build_info.o $(LD_SCRIPT)
	$(call link,$(APP_OBJS) $(BUILD_INFO_O) $(MIOT_LIB) $(LWIP_LIB) $(LIBS) $(LD_WRAPPERS))

$(BUILD_DIR)/dummy_main.c: $(APP_OBJS) $(MIOT_ESP_PATH)/Makefile.build
	$(vecho) "GEN   $@"
	$(Q) echo "void user_init(void){}; " \
            "void system_restart_local(){};" \
            "void __wrap_user_fatal_exception_handler(){}; " \
            "void __cyg_profile_func_enter(void *this_fn, void *call_site){(void) this_fn; (void) call_site;}" \
            "void __cyg_profile_func_exit(void *this_fn, void *call_site){(void) this_fn; (void) call_site;}" > $@

# Main app lib.
$(MIOT_LIB): $(MIOT_OBJS)
	$(vecho) "AR    $@"
	$(Q) $(AR) cru $@ $^
	$(Q) $(OBJCOPY) --rename-section .rodata=.irom0.text $@
	$(Q) $(OBJCOPY) --rename-section .rodata.str1.1=.irom0.text $@

# LWIP.
$(LWIP_LIB): $(LWIP_PATH)
	$(Q) $(MAKE) -C $(LWIP_PATH) -j3 all APP=liblwip_cs BUILD_DIR=$(LWIP_BUILD_DIR)

# This rule is for normal (pre-existing) sources from VPATH.
$(BUILD_DIR)/%.o: %.c $(GENFILES_FLAG)
	$(compile)

# This one is for generated sources in build directory.
$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c $(GENFILES_FLAG)
	$(compile)

# Common gathering point for all generated files.
# Except build info, which is special because it depends on objects.
$(GENFILES_FLAG): $(GENFILES_LIST)
	$(Q) touch $@

$(BUILD_DIR)/fr.c: $(MIOT_POSIX_BIN)
	$(vecho) "GEN   $@"
	$(Q) $(MIOT_POSIX_BIN) -freeze $(BUILD_DIR)/fr.dump
	$(Q) @nm $(MIOT_POSIX_BIN) > $(BUILD_DIR)/fr.sym
	$(Q) $(V7_PATH)/scripts/freeze.py $(BUILD_DIR)/fr.dump $(BUILD_DIR)/fr.sym >$@

# Generate linker script.
$(LD_SCRIPT): $(LD_SCRIPT_TEMPL)
	$(eval _IROM0ADDR=$(shell printf "0x%08x" $$((0x40200000 + $(basename $(notdir $@)) + $(IMAGE_HEADER_SIZE)))))
	$(eval _IROM0SIZE=$(ROM_SIZE))
	$(vecho) "GEN   $^ ($(_IROM0SIZE) @ $(_IROM0ADDR)) -> $@"
	$(Q) sed -e 's/_IROM0ADDR/$(_IROM0ADDR)/; s/_IROM0SIZE/$(_IROM0SIZE)/' $^ > $@

include $(REPO_PATH)/common/scripts/build_info.mk
include $(REPO_PATH)/fw/src/sys_config.mk

# Regenerate build info if there are changes in objects.
$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(APP_OBJS) $(MIOT_OBJS)

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)

# -- Filesystem.

$(FW_FS_OUT): $(APP_FS_PATH) $(COMMON_FS_PATH) $(FS_FILES) $(JSBIN_SRCS) $(BUILD_DIR)/mkspiffs
	$(Q) rm -rf $(FS_STAGING_DIR) && mkdir -p $(FS_STAGING_DIR)
	$(Q) $(foreach f,$(FS_FILES), \
	  echo "  CP    $(f) -> $(FS_STAGING_DIR)"; \
	  cp $(f) $(FS_STAGING_DIR);)
ifeq "$(SJ_ENABLE_JS)" "1"
	$(Q) $(foreach jsbin,$(JSBIN_SRCS), \
    echo "  V7C   $(jsbin) -> $(FS_STAGING_DIR)/$(basename $(notdir $(jsbin))).$(JSBIN_EXT)" && \
    $(BUILD_DIR)/v7 -c $(jsbin) > $(FS_STAGING_DIR)/$(basename $(notdir $(jsbin))).$(JSBIN_EXT) && ) true
endif
	$(vecho) "MKFS  $(FS_STAGING_DIR) ($(_FS_SIZE) @ $(FS_ADDR))-> $@"
	$(Q) $(BUILD_DIR)/mkspiffs $(_FS_SIZE) $(FS_STAGING_DIR) > $@

$(BUILD_DIR)/mkspiffs:
	$(MAKE) -C $(REPO_PATH)/common/spiffs/tools $(BUILD_DIR)/mkspiffs BUILD_DIR=$(BUILD_DIR)

ifeq "$(SJ_ENABLE_JS)" "1"
$(V7_PATH)/v7.c $(V7_PATH)/v7.h:
	make -C $(V7_PATH) $(notdir $@)

$(BUILD_DIR)/v7: $(V7_PATH)/v7.c $(V7_PATH)/v7.h
	$(vecho) "GCC   v7"
	$(Q) gcc -DV7_EXE -DV7_FREEZE $(V7_FEATURES) $(V7_PATH)/v7.c -lm -o $(BUILD_DIR)/v7

$(FW_FS_OUT): $(BUILD_DIR)/v7

# TODO(dfrank): add appropriate dependencies, so that it gets rebuilt when
# appropriate
$(MIOT_POSIX_BIN):
	$(MAKE) -j4 -C $(MIOT_POSIX_PATH) \
	  REPO_PATH=$(REPO_PATH) \
	  V7_FEATURES='$(V7_FEATURES) -DV7_MAIN -DV7_FREEZE' \
	  MIOT_FEATURES='$(MIOT_FEATURES)' \
	  BIN_DIR=$(MIOT_POSIX_BIN_DIR) \
	  BUILD_DIR=$(MIOT_POSIX_BUILD_DIR)
endif

# Target specific warning inhibitions

build/spiffs_hydrogen.o: CFLAGS += -Wno-unused-function

#
# Auxiliary targets.
#

rboot: $(BUILD_DIR)/esptool2 $(BUILD_DIR)/rboot.bin $(FW_STAGING_DIR)/$(RBOOT_FW_NAME)

$(ESPTOOL2):
	$(Q) $(MAKE) --no-print-directory -C $(BOOTLOADER_PATH)/esptool2 BUILD_DIR=$(BUILD_DIR)

$(BUILD_DIR)/rboot.bin: $(ESPTOOL2)
	$(Q) $(MAKE) --no-print-directory -C $(BOOTLOADER_PATH)/rboot -f rboot.mk RBOOT_BUILD_BASE=$(BUILD_DIR) \
    ESPTOOL2=$(ESPTOOL2) RBOOT_BIG_FLASH=1 CFLAGS_EXTRA="$(BOOTLOADER_FLAGS)"

clean:
	$(Q) rm -rf $(BUILD_DIR) $(FW_DIR)
