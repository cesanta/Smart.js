# -*- mode: makefile -*-
#
# Mongoose OS for Ubuntu

MAKEFLAGS += --warn-undefined-variables
.DEFAULT_GOAL := all

MGOS_PATH ?= ../../..
VPATH = $(MGOS_VPATH) $(SRC_PATH) $(PLATFORM_VPATH)
include $(MGOS_PATH)/fw/common.mk

APP_PATH := $(CURDIR)
SRC_PATH ?= ../../src
PLATFORM_VPATH ?= $(MGOS_PATH)/fw/platforms/$(BUILD_PLATFORM)/src
BUILD_DIR ?= ./build
BIN_DIR = build/bin
GEN_DIR = $(BUILD_DIR)/gen
APP ?= mongoose-os
VERBOSE ?= 0
SSL ?= None
DEBUG ?= 0
CC_WRAPPER ?=
BUILD_PLATFORM ?= ubuntu

# Explicitly disable updater, it's not supported on POSIX build yet.
MGOS_ENABLE_DEBUG_UDP = 0
MGOS_ENABLE_BITBANG = 0
MGOS_ENABLE_SYS_SERVICE = 0

MGOS_POSIX_FEATURES ?= -DMGOS_PROMPT_DISABLE_ECHO -DMGOS_MAX_NUM_UARTS=2 \
                       -DMGOS_HAVE_ETHERNET \
                       -DMGOS_NUM_HW_TIMERS=0
MONGOOSE_FEATURES = \
  -DMG_USE_READ_WRITE -DMG_ENABLE_THREADS -DMG_ENABLE_THREADS \
  -DMG_ENABLE_HTTP_STREAMING_MULTIPART -DMG_DISABLE_DAV \
  -DMG_MODULE_LINES


GEN_INCLUDES ?= $(GEN_DIR)
INCLUDES = $(MGOS_IPATH) $(SRC_PATH) $(BUILD_DIR) $(APP_INCLUDES) $(GEN_INCLUDES)
MGOS_SRCS = $(notdir $(wildcard *.c)) mgos_init.c  \
            frozen.c mgos_event.c \
            mgos_system.c mgos_time.c mgos_timers.c \
            mgos_config_util.c mgos_sys_config.c \
            json_utils.c cs_rbuf.c mgos_uart.c \
            mgos_utils.c cs_file.c cs_crc32.c

PLATFORM_SRCS = ubuntu_hal.c ubuntu_hal_system.c \
				ubuntu_hal_timers.c ubuntu_hal_uart.c \
				ubuntu_hal_gpio.c ubuntu_gpio.c \
				ubuntu_hal_net.c \
				ubuntu_fs.c \
				ubuntu_main.c

# Need solution for these:
#	    mgos_gpio.c mgos_vfs.c mgos_vfs_dev.c $(notdir $(MGOS_CONFIG_C)) $(notdir $(MGOS_RO_VARS_C))


CFLAGS_EXTRA =
CFLAGS ?= -std=c99 -fno-inline -W -Wall -Wundef -Werror -g -Wno-unused-function \
          -Wno-missing-field-initializers \
          -D_DEFAULT_SOURCE \
          -D_GNU_SOURCE \
          $(MGOS_FEATURES) $(MGOS_POSIX_FEATURES) \
          $(MONGOOSE_FEATURES) \
          -DMGOS_APP=\"$(APP)\" -DFW_ARCHITECTURE=$(BUILD_PLATFORM) \
          $(CFLAGS_EXTRA)

INCDIRS = $(addprefix -I,$(INCLUDES))
LINKER ?= gcc
LDFLAGS ?=
LIBS  ?= pthread
LDLIBS = $(addprefix -l,$(LIBS))

# Generated artifacts
BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c
MGOS_CONFIG_C = $(GEN_DIR)/mgos_config.c
MGOS_CONFIG_DEFAULTS_JSON = $(GEN_DIR)/conf0.json
MGOS_CONFIG_SCHEMA_JSON = $(GEN_DIR)/mgos_config_schema.json
MGOS_RO_VARS_C = $(GEN_DIR)/mgos_ro_vars.c
MGOS_RO_VARS_SCHEMA_JSON = $(GEN_DIR)/mgos_ro_vars_schema.json
GENFILES_LIST = $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C) $(BUILD_INFO_C) $(MG_BUILD_INFO_C)
GENFILES_OBJS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(GENFILES_LIST))

PLATFORM_OBJS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(PLATFORM_SRCS))
MGOS_OBJS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(MGOS_SRCS))
APP_OBJS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(APP_SOURCES))
OBJS = $(MGOS_OBJS) $(APP_OBJS) $(PLATFORM_OBJS) $(GENFILES_OBJS)

.PHONY: all clean

all: $(BUILD_DIR) $(GENFILES_LIST) $(OBJS) $(BIN_DIR)/$(APP)

include $(MGOS_PATH)/common/scripts/build_info.mk
include $(MGOS_PATH)/fw/src/mgos_config.mk
include $(MGOS_PATH)/fw/src/mgos_features.mk


$(BIN_DIR) $(BUILD_DIR):
	$(vecho) MKDIR $@
	$(Q) mkdir -p $@

# Mock to see what we need to output back to mos
deliverables:
	mkdir -p build/fw/ build/objs/
	touch build/fw/empty-ubuntu-last
	touch build/objs/empty.elf
	rm -f build/fw/empty-ubuntu-last.zip
	zip build/fw/empty-ubuntu-last.zip build/fw/empty-ubuntu-last build/objs/empty.elf

$(OBJS): $(BUILD_DIR)/%.o : %.c
	$(Q) mkdir -p $(shell dirname $(OBJS))
	$(vecho) "CC    $< -> $@"
	$(Q) $(CC_WRAPPER) $(CC) -MD $(INCDIRS) $(CFLAGS) -c $< -o $@

$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(APP_OBJS) $(MGOS_OBJS)
	$(call gen_build_info,$@,$(APP_PATH),$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C): $(MGOS_OBJS)
	$(call gen_build_info,$@,$(MGOS_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

-include $(wildcard $(BUILD_DIR)/*.d)

$(BIN_DIR)/$(APP): $(BIN_DIR) $(OBJS)
	$(vecho) "LD    $@"
	$(Q) $(CC_WRAPPER) $(LINKER) $(OBJS) $(LDLIBS) $(LDFLAGS) -o $(BIN_DIR)/$(APP)

clean:
	$(Q) rm -rf $(BIN_DIR) $(BUILD_DIR)
